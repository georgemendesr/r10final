const puppeteer = require('puppeteer');

(async () => {
  let browser;
  try {
    console.log('üîç Testando anima√ß√£o no scroll...');
    
    browser = await puppeteer.default.launch({ 
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await puppeteer.newPage();
    
    // Navegar para a p√°gina
    await page.goto('http://localhost:5175/post/21', { 
      waitUntil: 'networkidle0',
      timeout: 30000 
    });
    
    // Esperar o conte√∫do carregar
    await page.waitForSelector('.prose', { timeout: 10000 });
    
    // Verificar estado INICIAL da anima√ß√£o (deve estar invis√≠vel)
    const initialState = await page.$eval('.highlight-animated', el => {
      const style = el.getAttribute('style');
      const backgroundSize = style?.match(/background-size:\s*([^;!]+)/)?.[1];
      return {
        backgroundSize: backgroundSize?.trim(),
        isVisible: backgroundSize?.includes('100%') || false
      };
    });
    
    console.log('üìç Estado INICIAL da anima√ß√£o:', initialState);
    
    // Rolar at√© o elemento (simular usu√°rio scrollando)
    console.log('üìú Rolando p√°gina at√© o elemento highlight...');
    await page.evaluate(() => {
      const element = document.querySelector('.highlight-animated');
      if (element) {
        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    });
    
    // Aguardar um pouco para a anima√ß√£o acontecer
    await page.waitForTimeout(3000);
    
    // Verificar estado AP√ìS scroll (deve estar vis√≠vel/animado)
    const afterScrollState = await page.$eval('.highlight-animated', el => {
      const style = el.getAttribute('style');
      const backgroundSize = style?.match(/background-size:\s*([^;!]+)/)?.[1];
      return {
        backgroundSize: backgroundSize?.trim(),
        isVisible: backgroundSize?.includes('100%') || false,
        dataAnimated: el.getAttribute('data-animated')
      };
    });
    
    console.log('‚ú® Estado AP√ìS scroll:', afterScrollState);
    
    // Verificar se a anima√ß√£o funcionou corretamente
    if (!initialState.isVisible && afterScrollState.isVisible) {
      console.log('üéâ SUCCESS: Anima√ß√£o funcionou perfeitamente!');
      console.log('   ‚úÖ Inicial: invis√≠vel (background-size: 0%)');
      console.log('   ‚úÖ Ap√≥s scroll: vis√≠vel (background-size: 100%)');
    } else {
      console.log('‚ùå PROBLEMA na anima√ß√£o:');
      console.log(`   - Inicial vis√≠vel: ${initialState.isVisible}`);
      console.log(`   - Ap√≥s scroll vis√≠vel: ${afterScrollState.isVisible}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
})();