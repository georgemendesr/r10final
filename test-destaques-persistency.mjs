// Teste para verificar se o problema da quinta mat√©ria ainda ocorre
async function testDestaquesPersistency() {
    console.log('üß™ Iniciando teste de persist√™ncia dos destaques...\n');
    
    try {
        // 1. Verificar estado inicial
        console.log('üìã STEP 1: Verificando estado inicial...');
        const response1 = await fetch('http://127.0.0.1:3002/api/posts?limit=20');
        const data1 = await response1.json();
        
        const destaques1 = data1.posts.filter(p => p.section === 'destaque');
        console.log(`‚úÖ Destaques encontrados: ${destaques1.length}`);
        destaques1.forEach((post, index) => {
            console.log(`   ${index + 1}. ID: ${post.id} | ${post.title.substring(0, 50)}...`);
        });
        
        if (destaques1.length < 5) {
            console.log('‚ùå PROBLEMA: Menos de 5 destaques encontrados inicialmente!\n');
            return;
        }
        
        // 2. Simular uma edi√ß√£o simples em um destaque (sem mudan√ßa de posi√ß√£o)
        const primeiroDestaque = destaques1[0];
        console.log(`\nüìù STEP 2: Editando mat√©ria ID ${primeiroDestaque.id} (sem mudan√ßa de posi√ß√£o)...`);
        
        const editPayload = {
            title: primeiroDestaque.title + ' [TESTE EDITADO]',
            content: primeiroDestaque.content,
            section: 'destaque', // Mant√©m a mesma se√ß√£o
            category: primeiroDestaque.category,
            tags: primeiroDestaque.tags
        };
        
        const editResponse = await fetch(`http://127.0.0.1:3002/api/posts/${primeiroDestaque.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(editPayload)
        });
        
        if (!editResponse.ok) {
            console.log('‚ùå Erro na edi√ß√£o:', await editResponse.text());
            return;
        }
        
        console.log('‚úÖ Edi√ß√£o realizada com sucesso');
        
        // 3. Verificar se ainda temos 5 destaques
        console.log('\nüîç STEP 3: Verificando estado ap√≥s edi√ß√£o...');
        const response2 = await fetch('http://127.0.0.1:3002/api/posts?limit=20');
        const data2 = await response2.json();
        
        const destaques2 = data2.posts.filter(p => p.section === 'destaque');
        console.log(`üìä Destaques ap√≥s edi√ß√£o: ${destaques2.length}`);
        destaques2.forEach((post, index) => {
            console.log(`   ${index + 1}. ID: ${post.id} | ${post.title.substring(0, 50)}...`);
        });
        
        // 4. An√°lise dos resultados
        console.log('\nüìà AN√ÅLISE DOS RESULTADOS:');
        if (destaques2.length === 5) {
            console.log('‚úÖ SUCESSO: 5 destaques mantidos ap√≥s edi√ß√£o');
        } else {
            console.log(`‚ùå PROBLEMA: ${destaques2.length} destaques ap√≥s edi√ß√£o (deveria ser 5)`);
            console.log('   Poss√≠vel causa: L√≥gica de reorganiza√ß√£o sendo acionada desnecessariamente');
        }
        
        // 5. Desfazer altera√ß√£o de teste
        console.log('\nüîÑ STEP 4: Desfazendo altera√ß√£o de teste...');
        const restorePayload = {
            title: primeiroDestaque.title, // T√≠tulo original
            content: primeiroDestaque.content,
            section: 'destaque',
            category: primeiroDestaque.category,
            tags: primeiroDestaque.tags
        };
        
        await fetch(`http://127.0.0.1:3002/api/posts/${primeiroDestaque.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(restorePayload)
        });
        
        console.log('‚úÖ Altera√ß√£o de teste desfeita\n');
        
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error);
    }
}

testDestaquesPersistency();