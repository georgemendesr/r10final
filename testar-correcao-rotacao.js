const sqlite3 = require('sqlite3');
const db = new sqlite3.Database('./server/noticias.db');

console.log('üß™ TESTANDO CORRE√á√ÉO DA L√ìGICA DE ROTA√á√ÉO');

// Primeiro, verificar estado atual
console.log('\n1Ô∏è‚É£ ESTADO ANTES DA ALTERA√á√ÉO:');
db.all("SELECT id, titulo, posicao FROM noticias WHERE posicao IN ('supermanchete', 'destaque') ORDER BY posicao, id", (err, before) => {
    if (err) {
        console.error('‚ùå Erro:', err);
        return;
    }
    
    const supermanchetes = before.filter(p => p.posicao === 'supermanchete');
    const destaques = before.filter(p => p.posicao === 'destaque');
    
    console.log(`üìä Supermanchetes: ${supermanchetes.length}`);
    supermanchetes.forEach(s => console.log(`   - ID ${s.id}: ${s.titulo.substring(0, 50)}...`));
    
    console.log(`üìä Destaques: ${destaques.length}`);
    destaques.forEach(d => console.log(`   - ID ${d.id}: ${d.titulo.substring(0, 50)}...`));
    
    if (destaques.length !== 5) {
        console.log(`‚ö†Ô∏è  ATEN√á√ÉO: Existem ${destaques.length} destaques em vez de 5!`);
    }
    
    // 2. Simular cria√ß√£o de nova supermanchete
    console.log('\n2Ô∏è‚É£ PROMOVENDO POST 18 PARA SUPERMANCHETE (teste)...');
    
    // Usar a API interna para simular reorganiza√ß√£o
    db.get("SELECT * FROM noticias WHERE id = 18", (err, post18) => {
        if (err || !post18) {
            console.error('‚ùå Post 18 n√£o encontrado');
            db.close();
            return;
        }
        
        console.log(`üéØ Post a promover: ID ${post18.id} - ${post18.titulo}`);
        console.log(`   Posi√ß√£o atual: ${post18.posicao} ‚Üí supermanchete`);
        
        // Primeiro atualizar o post 18 para supermanchete
        db.run("UPDATE noticias SET posicao = 'supermanchete' WHERE id = 18", function(err) {
            if (err) {
                console.error('‚ùå Erro ao atualizar post 18:', err);
                db.close();
                return;
            }
            
            console.log('‚úÖ Post 18 atualizado para supermanchete');
            
            // Agora simular a reorganiza√ß√£o (fun√ß√£o corrigida)
            console.log('\n3Ô∏è‚É£ EXECUTANDO REORGANIZA√á√ÉO AUTOM√ÅTICA...');
            
            // Verificar resultado ap√≥s reorganiza√ß√£o
            setTimeout(() => {
                db.all("SELECT id, titulo, posicao FROM noticias WHERE posicao IN ('supermanchete', 'destaque') ORDER BY posicao, id", (err, after) => {
                    if (err) {
                        console.error('‚ùå Erro ao verificar resultado:', err);
                        db.close();
                        return;
                    }
                    
                    console.log('\n4Ô∏è‚É£ ESTADO AP√ìS REORGANIZA√á√ÉO:');
                    
                    const superAfter = after.filter(p => p.posicao === 'supermanchete');
                    const destaquesAfter = after.filter(p => p.posicao === 'destaque');
                    
                    console.log(`üìä Supermanchetes: ${superAfter.length}`);
                    superAfter.forEach(s => console.log(`   - ID ${s.id}: ${s.titulo.substring(0, 50)}...`));
                    
                    console.log(`üìä Destaques: ${destaquesAfter.length}`);
                    destaquesAfter.forEach(d => console.log(`   - ID ${d.id}: ${d.titulo.substring(0, 50)}...`));
                    
                    if (destaquesAfter.length === 5) {
                        console.log('\nüéâ SUCESSO! A se√ß√£o DESTAQUE mant√©m exatamente 5 mat√©rias!');
                    } else {
                        console.log(`\n‚ùå PROBLEMA: Destaques = ${destaquesAfter.length} (deveria ser 5)`);
                    }
                    
                    // Restaurar estado anterior para n√£o bagun√ßar
                    console.log('\n5Ô∏è‚É£ RESTAURANDO ESTADO ANTERIOR...');
                    db.run("UPDATE noticias SET posicao = 'geral' WHERE id = 18", () => {
                        console.log('‚úÖ Post 18 restaurado para posi√ß√£o original');
                        db.close();
                    });
                });
            }, 1000); // Aguardar reorganiza√ß√£o autom√°tica
        });
    });
});