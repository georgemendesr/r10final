/**
 * Azure Text-to-Speech Service
 * Converte texto de mat√©rias em √°udio usando Azure Cognitive Services
 */

const sdk = require('microsoft-cognitiveservices-speech-sdk');
const fs = require('fs');
const path = require('path');

class AzureTtsService {
  constructor() {
    // N√£o carregar vari√°veis no construtor, fazer lazy load
    this._speechKey = null;
    this._speechRegion = null;
    this._voiceName = null;
    this._initialized = false;
  }

  /**
   * Lazy load das configura√ß√µes (carrega na primeira chamada)
   */
  _init() {
    if (this._initialized) return;
    
    this._speechKey = process.env.AZURE_SPEECH_KEY;
    this._speechRegion = process.env.AZURE_SPEECH_REGION || 'brazilsouth';
    this._voiceName = process.env.AZURE_SPEECH_VOICE || 'pt-BR-AntonioNeural';
    this._initialized = true;
    
    if (!this._speechKey) {
      console.warn('[Azure TTS] AZURE_SPEECH_KEY n√£o configurada. TTS desabilitado.');
    }
  }

  get speechKey() {
    this._init();
    return this._speechKey;
  }

  get speechRegion() {
    this._init();
    return this._speechRegion;
  }

  get voiceName() {
    this._init();
    return this._voiceName;
  }

  /**
   * Verifica se o servi√ßo est√° configurado
   */
  isConfigured() {
    this._init();
    return !!this._speechKey && !!this._speechRegion;
  }

  /**
   * Escapa caracteres especiais para XML/SSML
   * CR√çTICO: Previne SSML parsing errors
   * IMPORTANTE: N√£o escapar aspas pois elas s√£o normalizadas antes e n√£o quebram SSML em conte√∫do de texto
   */
  escapeXml(text) {
    if (!text) return '';
    return text
      .replace(/&/g, '&amp;')   // & deve ser primeiro!
      .replace(/</g, '&lt;')    // < pode indicar tag HTML
      .replace(/>/g, '&gt;');   // > pode indicar tag HTML
    // N√ÉO escapar " e ' pois cleanTextForSpeech j√° normaliza e eles n√£o quebram SSML em text nodes
  }

  /**
   * Limpa o HTML e prepara o texto para narra√ß√£o com naturalidade
   */
  cleanTextForSpeech(htmlContent) {
    if (!htmlContent) return '';

    // Remove tags HTML
    let text = htmlContent.replace(/<[^>]*>/g, ' ');
    
    // ===== NORMALIZA√á√ÉO PARA NATURALIDADE =====
    
    // Expandir abrevia√ß√µes comuns
    text = text.replace(/\bR\$\s*(\d+)/g, '$1 reais'); // R$ 100 ‚Üí 100 reais
    text = text.replace(/\bDr\./g, 'Doutor');
    text = text.replace(/\bDra\./g, 'Doutora');
    text = text.replace(/\bSr\./g, 'Senhor');
    text = text.replace(/\bSra\./g, 'Senhora');
    text = text.replace(/\bProf\./g, 'Professor');
    text = text.replace(/\bProfa\./g, 'Professora');
    
    // Siglas comuns do Piau√≠/Brasil (falar letra por letra)
    text = text.replace(/\bPM\b/g, 'P√™ Eme'); // Pol√≠cia Militar
    text = text.replace(/\bPC\b/g, 'P√™ C√™'); // Pol√≠cia Civil
    text = text.replace(/\bPRF\b/g, 'P√™ Erre Efe'); // Pol√≠cia Rodovi√°ria Federal
    text = text.replace(/\bUPA\b/g, 'U P A'); // Unidade de Pronto Atendimento
    text = text.replace(/\bUBS\b/g, 'U B S'); // Unidade B√°sica de Sa√∫de
    text = text.replace(/\bCPF\b/g, 'C√™ P√™ Efe');
    text = text.replace(/\bRG\b/g, 'Erre G√™');
    text = text.replace(/\bCNH\b/g, 'C√™ Ene Ag√°');
    text = text.replace(/\bSUS\b/g, 'S U S');
    text = text.replace(/\bMPPI\b/g, 'Eme P√™ P√™ I'); // Minist√©rio P√∫blico do Piau√≠
    text = text.replace(/\bTJPI\b/g, 'T√™ Jota P√™ I'); // Tribunal de Justi√ßa do Piau√≠
    text = text.replace(/\bPI\b/g, 'Piau√≠'); // Estado
    text = text.replace(/\bBR-(\d+)/g, 'B R $1'); // BR-343 ‚Üí B R 343
    
    // √ìrg√£os que devem ser falados por extenso
    text = text.replace(/\bIBGE\b/g, 'I B G E');
    text = text.replace(/\bINSS\b/g, 'I N S S');
    text = text.replace(/\bFGTS\b/g, 'Efe G√™ T√™ Esse');
    
    // Partidos pol√≠ticos
    text = text.replace(/\bPT\b/g, 'P√™ T√™');
    text = text.replace(/\bPSDB\b/g, 'P√™ Esse D√™ B√™');
    text = text.replace(/\bPL\b/g, 'P√™ √âle');
    text = text.replace(/\bPDT\b/g, 'P√™ D√™ T√™');
    text = text.replace(/\bMDB\b/g, 'Eme D√™ B√™');
    
    // Normalizar n√∫meros de telefone
    text = text.replace(/\((\d{2})\)\s*(\d{4,5})-(\d{4})/g, (match, ddd, parte1, parte2) => {
      return `telefone ${ddd} ${parte1} ${parte2}`;
    });
    
    // Hor√°rios (15h30 ‚Üí 15 horas e 30 minutos)
    text = text.replace(/(\d{1,2})h(\d{2})/g, '$1 horas e $2 minutos');
    text = text.replace(/(\d{1,2})h\b/g, '$1 horas');
    
    // Datas (01/01/2024 ‚Üí 1 de janeiro de 2024)
    const meses = ['janeiro', 'fevereiro', 'mar√ßo', 'abril', 'maio', 'junho', 
                   'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'];
    text = text.replace(/(\d{1,2})\/(\d{1,2})\/(\d{4})/g, (match, dia, mes, ano) => {
      const mesNome = meses[parseInt(mes) - 1] || mes;
      return `${parseInt(dia)} de ${mesNome} de ${ano}`;
    });
    
    // Remove m√∫ltiplos espa√ßos
    text = text.replace(/\s+/g, ' ');
    
    // Remove caracteres especiais problem√°ticos
    text = text.replace(/[""]/g, '"');
    text = text.replace(/['']/g, "'");
    
    // Melhorar pausas em pontua√ß√µes (SSML vai controlar isso melhor)
    text = text.replace(/\.\s+/g, '. ');
    text = text.replace(/\?\s+/g, '? ');
    text = text.replace(/!\s+/g, '! ');
    text = text.replace(/,\s+/g, ', ');
    text = text.replace(/:\s+/g, ': ');
    
    return text.trim();
  }

  /**
   * Cria SSML (Speech Synthesis Markup Language) para melhor controle da narra√ß√£o
   */
  createSSML(text, titulo = '', voiceName = null) {
    const cleanText = this.cleanTextForSpeech(text);
    const cleanTitle = titulo ? this.cleanTextForSpeech(titulo) : '';
    const voice = voiceName || this.voiceName;
    
    // CR√çTICO: Escapar XML para prevenir SSML parsing errors
    const escapedText = this.escapeXml(cleanText);
    const escapedTitle = this.escapeXml(cleanTitle);
    
    let ssml = `<speak version="1.0" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="pt-BR">`;
    ssml += `<voice name="${voice}">`;
    
    // Adiciona t√≠tulo com √™nfase se fornecido
    if (escapedTitle) {
      ssml += `<prosody rate="0.95" pitch="+3%" volume="+2dB">`;
      ssml += `<emphasis level="moderate">${escapedTitle}</emphasis>`;
      ssml += `</prosody>`;
      ssml += `<break time="1000ms"/>`; // Pausa de 1 segundo ap√≥s t√≠tulo
    }
    
    // Adiciona o conte√∫do com velocidade natural e pausas
    // Dividir em par√°grafos para adicionar pausas entre eles
    // CR√çTICO: Usar escapedText que j√° tem XML entities escapadas
    const paragraphs = escapedText.split(/\n\n+/);
    
    paragraphs.forEach((para, index) => {
      if (!para.trim()) return;
      
      // Velocidade um pouco mais lenta para melhor compreens√£o
      ssml += `<prosody rate="0.95" pitch="0%" volume="medium">`;
      
      // Adicionar pausas em v√≠rgulas e pontos
      // Nota: Para j√° est√° escapado (vem de escapedText)
      let paraWithPauses = para;
      paraWithPauses = paraWithPauses.replace(/,\s+/g, ',<break time="300ms"/> ');
      paraWithPauses = paraWithPauses.replace(/\.\s+/g, '.<break time="500ms"/> ');
      paraWithPauses = paraWithPauses.replace(/!\s+/g, '!<break time="600ms"/> ');
      paraWithPauses = paraWithPauses.replace(/\?\s+/g, '?<break time="600ms"/> ');
      paraWithPauses = paraWithPauses.replace(/:\s+/g, ':<break time="400ms"/> ');
      
      ssml += paraWithPauses;
      ssml += `</prosody>`;
      
      // Pausa entre par√°grafos
      if (index < paragraphs.length - 1) {
        ssml += `<break time="800ms"/>`;
      }
    });
    
    ssml += `</voice>`;
    ssml += `</speak>`;
    
    return ssml;
  }

  /**
   * Gera √°udio a partir de texto
   * @param {string} text - Texto a ser convertido (pode ser HTML)
   * @param {string} outputPath - Caminho completo do arquivo de sa√≠da (.mp3)
   * @param {object} options - Op√ß√µes adicionais
   * @returns {Promise<{success: boolean, filePath?: string, duration?: number, error?: string}>}
   */
  async generateAudio(text, outputPath, options = {}) {
    return new Promise((resolve, reject) => {
      if (!this.isConfigured()) {
        return reject(new Error('Azure TTS n√£o configurado. Configure AZURE_SPEECH_KEY e AZURE_SPEECH_REGION.'));
      }

      try {
        // Configurar Speech SDK
        const speechConfig = sdk.SpeechConfig.fromSubscription(this.speechKey, this.speechRegion);
        
        // Configurar formato de sa√≠da (MP3)
        speechConfig.speechSynthesisOutputFormat = sdk.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3;
        
        // Usar voz customizada se fornecida, sen√£o usar padr√£o
        const voiceToUse = options.voiceName || this.voiceName;
        
        // Criar diret√≥rio se n√£o existir
        const dir = path.dirname(outputPath);
        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir, { recursive: true });
        }

        // Configurar sa√≠da de √°udio para arquivo
        const audioConfig = sdk.AudioConfig.fromAudioFileOutput(outputPath);
        
        // Criar sintetizador
        const synthesizer = new sdk.SpeechSynthesizer(speechConfig, audioConfig);
        
        // Criar SSML com voz customizada
        const ssml = this.createSSML(text, options.titulo, voiceToUse);
        
        console.log(`[Azure TTS] Gerando √°udio: ${path.basename(outputPath)}`);
        console.log(`[Azure TTS] Tamanho do texto: ${text.length} caracteres`);
        console.log(`[Azure TTS] üîç SSML Gerado (primeiros 500 chars):`, ssml.substring(0, 500));
        
        // Sintetizar
        synthesizer.speakSsmlAsync(
          ssml,
          result => {
            if (result.reason === sdk.ResultReason.SynthesizingAudioCompleted) {
              const duration = result.audioDuration / 10000000; // Convert to seconds
              console.log(`[Azure TTS] ‚úÖ √Åudio gerado com sucesso: ${duration.toFixed(2)}s`);
              
              synthesizer.close();
              resolve({
                success: true,
                filePath: outputPath,
                duration: duration,
                fileSize: fs.statSync(outputPath).size
              });
            } else {
              console.error(`[Azure TTS] ‚ùå Erro na s√≠ntese: ${result.errorDetails}`);
              synthesizer.close();
              reject(new Error(`Falha na s√≠ntese: ${result.errorDetails}`));
            }
          },
          error => {
            console.error(`[Azure TTS] ‚ùå Erro: ${error}`);
            synthesizer.close();
            reject(error);
          }
        );
      } catch (error) {
        console.error(`[Azure TTS] ‚ùå Exce√ß√£o:`, error);
        reject(error);
      }
    });
  }

  /**
   * Gera √°udio para uma mat√©ria completa
   * @param {object} post - Objeto da mat√©ria com titulo, subtitulo, conteudo
   * @param {string} outputDir - Diret√≥rio onde salvar o √°udio
   * @returns {Promise<object>} Informa√ß√µes do √°udio gerado
   */
  async generatePostAudio(post, outputDir = './uploads/audio') {
    if (!this.isConfigured()) {
      throw new Error('Azure TTS n√£o configurado');
    }

    // Montar texto completo para narra√ß√£o
    let fullText = '';
    
    // N√ÉO adicionar t√≠tulo aqui - ele √© passado separadamente para o SSML
    // O SSML j√° coloca o t√≠tulo com √™nfase e pausa
    
    if (post.subtitulo) {
      fullText += post.subtitulo + '. ';
    }
    
    if (post.conteudo) {
      fullText += post.conteudo;
    }

    // Gerar nome do arquivo
    const filename = `post-${post.id}-${Date.now()}.mp3`;
    const outputPath = path.join(outputDir, filename);

    // Gerar √°udio (t√≠tulo vai no SSML com √™nfase)
    const result = await this.generateAudio(fullText, outputPath, {
      titulo: post.titulo
    });

    return {
      ...result,
      relativeUrl: `/uploads/audio/${filename}`,
      postId: post.id
    };
  }

  /**
   * Lista vozes dispon√≠veis para a regi√£o configurada
   */
  async listAvailableVoices() {
    return new Promise((resolve, reject) => {
      if (!this.isConfigured()) {
        return reject(new Error('Azure TTS n√£o configurado'));
      }

      const speechConfig = sdk.SpeechConfig.fromSubscription(this.speechKey, this.speechRegion);
      const synthesizer = new sdk.SpeechSynthesizer(speechConfig);

      synthesizer.getVoicesAsync(
        result => {
          if (result.reason === sdk.ResultReason.VoicesListRetrieved) {
            // Filtrar apenas vozes em portugu√™s do Brasil
            const ptBRVoices = result.voices
              .filter(voice => voice.locale.startsWith('pt-BR'))
              .map(voice => ({
                name: voice.name,
                displayName: voice.localName,
                gender: voice.gender === 1 ? 'Masculino' : 'Feminino',
                locale: voice.locale
              }));
            
            synthesizer.close();
            resolve(ptBRVoices);
          } else {
            synthesizer.close();
            reject(new Error('Falha ao listar vozes'));
          }
        },
        error => {
          synthesizer.close();
          reject(error);
        }
      );
    });
  }
}

// Exportar inst√¢ncia singleton
module.exports = new AzureTtsService();
